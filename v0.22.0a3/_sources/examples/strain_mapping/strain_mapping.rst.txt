
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/strain_mapping/strain_mapping.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_strain_mapping_strain_mapping.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_strain_mapping_strain_mapping.py:


Strain Mapping
==============

Strain mapping in pyxem is done by fitting a :class:`~.signals.tensor_field.DisplacementGradientMap` to the data.
This can be thought of as image distortion around some central point.

.. GENERATED FROM PYTHON SOURCE LINES 8-13

.. code-block:: Python


    from pyxem.data import simulated_strain
    import hyperspy.api as hs









.. GENERATED FROM PYTHON SOURCE LINES 14-18

In this example we will create a simulated strain map using the :meth:`~.data.simulated_strain` function.
This just creates a simulated diffraction pattern and applies a simple "strain" to it. In this
case using simulated data is slightly easier for demonstration purposes. If you want to use
real data the :meth:`~.data.zrnb_precipitate` dataset is a good example of strain from a precipitate.

.. GENERATED FROM PYTHON SOURCE LINES 18-28

.. code-block:: Python


    strained_signal = simulated_strain(
        navigation_shape=(32, 32),
        signal_shape=(512, 512),
        disk_radius=20,
        num_electrons=1e5,
        strain_matrix=None,
        lazy=True,
    )








.. GENERATED FROM PYTHON SOURCE LINES 29-31

The first thing we want to do is to find peaks within the diffraction pattern. I'd recommend
using the :meth:`~.signals.diffraction2d.get_diffraction_vectors` method

.. GENERATED FROM PYTHON SOURCE LINES 31-37

.. code-block:: Python


    strained_signal.calibration.center = (
        None  # First set the center to be (256, 256) or the center of the signal
    )
    template_matched = strained_signal.template_match_disk(disk_r=20, subtract_min=False)
    template_matched.plot(vmin=0.4)



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/strain_mapping/images/sphx_glr_strain_mapping_001.png
         :alt: strain mapping
         :srcset: /examples/strain_mapping/images/sphx_glr_strain_mapping_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/strain_mapping/images/sphx_glr_strain_mapping_002.png
         :alt:  Signal
         :srcset: /examples/strain_mapping/images/sphx_glr_strain_mapping_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/65 [00:00<?, ?it/s]      2%|▏         | 1/65 [00:00<00:51,  1.25it/s]     14%|█▍        | 9/65 [00:01<00:08,  6.48it/s]     26%|██▌       | 17/65 [00:02<00:05,  8.22it/s]     38%|███▊      | 25/65 [00:03<00:04,  9.08it/s]     51%|█████     | 33/65 [00:03<00:03,  9.54it/s]     63%|██████▎   | 41/65 [00:04<00:02,  9.80it/s]     72%|███████▏  | 47/65 [00:04<00:01, 12.67it/s]     77%|███████▋  | 50/65 [00:05<00:01,  9.71it/s]     85%|████████▍ | 55/65 [00:05<00:00, 12.54it/s]     89%|████████▉ | 58/65 [00:06<00:00,  9.22it/s]    100%|██████████| 65/65 [00:06<00:00, 10.29it/s]




.. GENERATED FROM PYTHON SOURCE LINES 38-40

Plotting the template matched signal and setting ``vmin`` is a good way to see what threshold you
should use for the :meth:`~.signals.diffraction2d.get_diffraction_vectors` method.

.. GENERATED FROM PYTHON SOURCE LINES 40-49

.. code-block:: Python


    diffraction_vectors = template_matched.get_diffraction_vectors(
        threshold_abs=0.4, min_distance=5
    )

    markers = diffraction_vectors.to_markers(color="w", sizes=5, alpha=0.5)
    strained_signal.plot()
    strained_signal.add_marker(markers)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/strain_mapping/images/sphx_glr_strain_mapping_003.png
         :alt: strain mapping
         :srcset: /examples/strain_mapping/images/sphx_glr_strain_mapping_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/strain_mapping/images/sphx_glr_strain_mapping_004.png
         :alt:  Signal
         :srcset: /examples/strain_mapping/images/sphx_glr_strain_mapping_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/65 [00:00<?, ?it/s]    100%|██████████| 65/65 [00:00<00:00, 1220.12it/s]




.. GENERATED FROM PYTHON SOURCE LINES 50-57

Determining the Strain
----------------------
We can just use the first ring of the diffraction pattern to determine the strain. We can do this by
using the :meth:`~.signals.DiffractionVectors.filter_magnitude` method. You can also look at the
:ref:`filtering vectors <_sphx_glr_examples_vectors_masking_vectors.py>` example to see
how to select which vectors you want to use more generally. You can also just manually input the un-strained
vectors or use simulated/ rotated vectors as well.

.. GENERATED FROM PYTHON SOURCE LINES 57-70

.. code-block:: Python


    first_ring_vectors = diffraction_vectors.filter_magnitude(
        min_magnitude=0.1,
        max_magnitude=1,
    )
    unstrained_vectors = first_ring_vectors.inav[0, 0]

    strain_maps = first_ring_vectors.get_strain_maps(
        unstrained_vectors=unstrained_vectors, return_residuals=False
    )

    strain_maps.plot()




.. image-sg:: /examples/strain_mapping/images/sphx_glr_strain_mapping_005.png
   :alt: e11, e22, e12, theta
   :srcset: /examples/strain_mapping/images/sphx_glr_strain_mapping_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/2 [00:00<?, ?it/s]     50%|█████     | 1/2 [00:00<00:00,  1.40it/s]    100%|██████████| 2/2 [00:00<00:00,  2.81it/s]
      0%|          | 0/65 [00:00<?, ?it/s]      2%|▏         | 1/65 [00:01<01:12,  1.14s/it]     14%|█▍        | 9/65 [00:02<00:12,  4.58it/s]     26%|██▌       | 17/65 [00:03<00:08,  5.78it/s]     38%|███▊      | 25/65 [00:04<00:06,  6.25it/s]     51%|█████     | 33/65 [00:05<00:04,  6.58it/s]     63%|██████▎   | 41/65 [00:06<00:03,  6.83it/s]     75%|███████▌  | 49/65 [00:07<00:02,  6.96it/s]     88%|████████▊ | 57/65 [00:08<00:01,  7.07it/s]    100%|██████████| 65/65 [00:08<00:00,  7.26it/s]
      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 549.43it/s]
      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 616.68it/s]
      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 4884.67it/s]
      0%|          | 0/9 [00:00<?, ?it/s]    100%|██████████| 9/9 [00:00<00:00, 7543.71it/s]

    [<Axes: title={'center': 'e11'}, xlabel='x axis (nm)', ylabel='y axis (nm)'>, <Axes: title={'center': 'e22'}, xlabel='x axis (nm)', ylabel='y axis (nm)'>, <Axes: title={'center': 'e12'}, xlabel='x axis (nm)', ylabel='y axis (nm)'>, <Axes: title={'center': 'theta'}, xlabel='x axis (nm)', ylabel='y axis (nm)'>]



.. GENERATED FROM PYTHON SOURCE LINES 71-75

Some final notes about strain mapping. In general, you want to use as many pixels as possible. 512 x 512 is a good
place to start.  You can do strain mapping with fewer pixels, but the results will be less accurate. Precession
also helps improve the results as does having a thinner sample both of which reduce the effects of dynamical
diffraction.

.. GENERATED FROM PYTHON SOURCE LINES 77-78

sphinx_gallery_thumbnail_number = 5


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 31.714 seconds)


.. _sphx_glr_download_examples_strain_mapping_strain_mapping.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: strain_mapping.ipynb <strain_mapping.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: strain_mapping.py <strain_mapping.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: strain_mapping.zip <strain_mapping.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
