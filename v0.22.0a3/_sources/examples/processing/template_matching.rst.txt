
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/processing/template_matching.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_processing_template_matching.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_processing_template_matching.py:


Template Matching
=================

This example shows how the template matching is done in pyxem to find peaks in a diffraction pattern.

.. GENERATED FROM PYTHON SOURCE LINES 7-19

.. code-block:: Python


    import numpy as np
    import hyperspy.api as hs
    import matplotlib.pyplot as plt
    from skimage.morphology import disk


    import pyxem as pxm
    import pyxem.data.dummy_data.make_diffraction_test_data as mdtd

    s = pxm.data.tilt_boundary_data()








.. GENERATED FROM PYTHON SOURCE LINES 20-26

How Template Matching Works
===========================

Pyxem uses a window-normalized cross-correlation to find the peaks.  This is much better for finding
both strongly and weakly scattering peaks but sometimes if the window is too small, too large, or the
wrong shape, the behavior can be unexpected.

.. GENERATED FROM PYTHON SOURCE LINES 26-50

.. code-block:: Python


    template = disk(5)
    padded_template = np.pad(template, 3)  # padding a template increased the window size
    padded_template_large = np.pad(
        template, 20
    )  # padding a template increased the window size

    template_normal = s.template_match(template)
    template_padded = s.template_match(padded_template)
    template_padded_large = s.template_match(padded_template_large)

    ind = (5, 5)
    hs.plot.plot_images(
        [
            s.inav[ind],
            template_normal.inav[ind],
            template_padded.inav[ind],
            template_padded_large.inav[ind],
        ],
        label=["Signal", "Normal Window", "Large Window", "Very Large Window"],
        tight_layout=True,
        per_row=2,
    )




.. image-sg:: /examples/processing/images/sphx_glr_template_matching_001.png
   :alt: Signal, Normal Window, Large Window, Very Large Window
   :srcset: /examples/processing/images/sphx_glr_template_matching_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/51 [00:00<?, ?it/s]     25%|██▌       | 13/51 [00:00<00:00, 128.36it/s]     65%|██████▍   | 33/51 [00:00<00:00, 137.35it/s]    100%|██████████| 51/51 [00:00<00:00, 161.91it/s]
      0%|          | 0/51 [00:00<?, ?it/s]     22%|██▏       | 11/51 [00:00<00:00, 108.66it/s]     53%|█████▎    | 27/51 [00:00<00:00, 137.82it/s]     88%|████████▊ | 45/51 [00:00<00:00, 149.74it/s]    100%|██████████| 51/51 [00:00<00:00, 156.23it/s]
      0%|          | 0/51 [00:00<?, ?it/s]     18%|█▊        | 9/51 [00:00<00:00, 65.87it/s]     49%|████▉     | 25/51 [00:00<00:00, 99.00it/s]     80%|████████  | 41/51 [00:00<00:00, 107.40it/s]    100%|██████████| 51/51 [00:00<00:00, 113.35it/s]

    [<Axes: title={'center': 'Signal'}, xlabel='kx axis (px)', ylabel='ky axis (px)'>, <Axes: title={'center': 'Normal Window'}, xlabel='kx axis (px)', ylabel='ky axis (px)'>, <Axes: title={'center': 'Large Window'}, xlabel='kx axis (px)', ylabel='ky axis (px)'>, <Axes: title={'center': 'Very Large Window'}, xlabel='kx axis (px)', ylabel='ky axis (px)'>]



.. GENERATED FROM PYTHON SOURCE LINES 51-62

In the very large window case you can see that in the middle the strong zero beam is __included__ in the window
and the intensity for those pixels is suppressed in the template matching. We also see this occurs in a
square pattern because even though our template is a disk, the window is a square!

Template Matching with an Amorphous Halo
=========================================

Sometimes the template matching can be thrown off by an amorphous halo around the diffraction spots.  This
can be seen in the following example.  In this case we can use a dilated (circular) window to reduce the
effect of the imposed square window. This can be seen in the intensity of the diffraction vectors at
+y,+x and -y,-x.

.. GENERATED FROM PYTHON SOURCE LINES 62-102

.. code-block:: Python


    data = mdtd.generate_4d_data(
        image_size_x=s.axes_manager.signal_axes[0].size,
        image_size_y=s.axes_manager.signal_axes[1].size,
        disk_x=s.axes_manager.signal_axes[0].size // 2,
        disk_y=s.axes_manager.signal_axes[0].size // 2,
        ring_r=45 / 128 * s.axes_manager.signal_axes[0].size // 2,
        ring_x=s.axes_manager.signal_axes[0].size // 2,
        ring_y=s.axes_manager.signal_axes[0].size // 2,
        disk_I=10,
        ring_lw=8,
        ring_I=2,
    )
    amorphous_data = data + s

    template_normal = amorphous_data.template_match_disk(disk_r=6, subtract_min=False)
    template_circular = amorphous_data.template_match_disk(
        disk_r=6, circular_background=True, template_dilation=5, subtract_min=False
    )
    mask = template_normal.get_direct_beam_mask(35)

    mask2 = ~template_normal.get_direct_beam_mask(55)

    template_normal.data[:, :, mask] = 0
    template_circular.data[:, :, mask] = 0

    template_normal.data[:, :, mask2] = 0
    template_circular.data[:, :, mask2] = 0

    f = plt.figure(figsize=(15, 5))
    ind = (5, 5)
    hs.plot.plot_images(
        [amorphous_data.inav[ind], template_normal.inav[ind], template_circular.inav[ind]],
        label=["Signal", "Square Window", "Circular Window"],
        tight_layout=True,
        per_row=3,
        vmin=[0, 0.7, 0.7],
        fig=f,
    )




.. image-sg:: /examples/processing/images/sphx_glr_template_matching_002.png
   :alt: Signal, Square Window, Circular Window
   :srcset: /examples/processing/images/sphx_glr_template_matching_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Make test data:   0%|          | 0/100 [00:00<?, ?it/s]    Make test data:   2%|▏         | 2/100 [00:00<00:05, 16.78it/s]    Make test data:   4%|▍         | 4/100 [00:00<00:05, 17.58it/s]    Make test data:   6%|▌         | 6/100 [00:00<00:05, 17.92it/s]    Make test data:   8%|▊         | 8/100 [00:00<00:05, 17.95it/s]    Make test data:  10%|█         | 10/100 [00:00<00:04, 18.15it/s]    Make test data:  12%|█▏        | 12/100 [00:00<00:04, 18.01it/s]    Make test data:  14%|█▍        | 14/100 [00:00<00:04, 18.18it/s]    Make test data:  16%|█▌        | 16/100 [00:00<00:04, 18.04it/s]    Make test data:  18%|█▊        | 18/100 [00:00<00:04, 18.17it/s]    Make test data:  20%|██        | 20/100 [00:01<00:04, 18.06it/s]    Make test data:  22%|██▏       | 22/100 [00:01<00:04, 18.18it/s]    Make test data:  24%|██▍       | 24/100 [00:01<00:04, 17.98it/s]    Make test data:  26%|██▌       | 26/100 [00:01<00:04, 18.19it/s]    Make test data:  28%|██▊       | 28/100 [00:01<00:03, 18.18it/s]    Make test data:  30%|███       | 30/100 [00:01<00:03, 18.37it/s]    Make test data:  32%|███▏      | 32/100 [00:01<00:03, 18.38it/s]    Make test data:  34%|███▍      | 34/100 [00:01<00:03, 18.45it/s]    Make test data:  36%|███▌      | 36/100 [00:01<00:03, 18.24it/s]    Make test data:  38%|███▊      | 38/100 [00:02<00:03, 18.28it/s]    Make test data:  40%|████      | 40/100 [00:02<00:03, 18.18it/s]    Make test data:  42%|████▏     | 42/100 [00:02<00:03, 18.16it/s]    Make test data:  44%|████▍     | 44/100 [00:02<00:03, 18.03it/s]    Make test data:  46%|████▌     | 46/100 [00:02<00:02, 18.20it/s]    Make test data:  48%|████▊     | 48/100 [00:02<00:02, 18.24it/s]    Make test data:  50%|█████     | 50/100 [00:02<00:02, 18.07it/s]    Make test data:  52%|█████▏    | 52/100 [00:02<00:02, 18.18it/s]    Make test data:  54%|█████▍    | 54/100 [00:02<00:02, 18.08it/s]    Make test data:  56%|█████▌    | 56/100 [00:03<00:02, 18.16it/s]    Make test data:  58%|█████▊    | 58/100 [00:03<00:02, 18.08it/s]    Make test data:  60%|██████    | 60/100 [00:03<00:02, 18.17it/s]    Make test data:  62%|██████▏   | 62/100 [00:03<00:02, 18.09it/s]    Make test data:  64%|██████▍   | 64/100 [00:03<00:01, 18.16it/s]    Make test data:  66%|██████▌   | 66/100 [00:03<00:01, 18.12it/s]    Make test data:  68%|██████▊   | 68/100 [00:03<00:01, 18.10it/s]    Make test data:  70%|███████   | 70/100 [00:03<00:01, 18.06it/s]    Make test data:  72%|███████▏  | 72/100 [00:03<00:01, 18.14it/s]    Make test data:  74%|███████▍  | 74/100 [00:04<00:01, 17.82it/s]    Make test data:  76%|███████▌  | 76/100 [00:04<00:01, 17.94it/s]    Make test data:  78%|███████▊  | 78/100 [00:04<00:01, 17.82it/s]    Make test data:  80%|████████  | 80/100 [00:04<00:01, 17.93it/s]    Make test data:  82%|████████▏ | 82/100 [00:04<00:01, 17.92it/s]    Make test data:  84%|████████▍ | 84/100 [00:04<00:00, 18.06it/s]    Make test data:  86%|████████▌ | 86/100 [00:04<00:00, 18.04it/s]    Make test data:  88%|████████▊ | 88/100 [00:04<00:00, 18.22it/s]    Make test data:  90%|█████████ | 90/100 [00:04<00:00, 18.11it/s]    Make test data:  92%|█████████▏| 92/100 [00:05<00:00, 18.22it/s]    Make test data:  94%|█████████▍| 94/100 [00:05<00:00, 18.13it/s]    Make test data:  96%|█████████▌| 96/100 [00:05<00:00, 18.18it/s]    Make test data:  98%|█████████▊| 98/100 [00:05<00:00, 18.24it/s]    Make test data: 100%|██████████| 100/100 [00:05<00:00, 18.10it/s]    Make test data: 100%|██████████| 100/100 [00:05<00:00, 18.10it/s]
      0%|          | 0/51 [00:00<?, ?it/s]     22%|██▏       | 11/51 [00:00<00:00, 104.72it/s]     53%|█████▎    | 27/51 [00:00<00:00, 135.35it/s]     84%|████████▍ | 43/51 [00:00<00:00, 141.82it/s]    100%|██████████| 51/51 [00:00<00:00, 152.81it/s]
      0%|          | 0/51 [00:00<?, ?it/s]     18%|█▊        | 9/51 [00:00<00:00, 66.52it/s]     45%|████▌     | 23/51 [00:00<00:00, 99.55it/s]     67%|██████▋   | 34/51 [00:00<00:00, 89.86it/s]     92%|█████████▏| 47/51 [00:00<00:00, 98.46it/s]    100%|██████████| 51/51 [00:00<00:00, 98.17it/s]

    [<Axes: title={'center': 'Signal'}, xlabel='kx axis (px)', ylabel='ky axis (px)'>, <Axes: title={'center': 'Square Window'}, xlabel='kx axis (px)', ylabel='ky axis (px)'>, <Axes: title={'center': 'Circular Window'}, xlabel='kx axis (px)', ylabel='ky axis (px)'>]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 9.248 seconds)


.. _sphx_glr_download_examples_processing_template_matching.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: template_matching.ipynb <template_matching.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: template_matching.py <template_matching.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: template_matching.zip <template_matching.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
