
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/processing/vector_finding.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_processing_vector_finding.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_processing_vector_finding.py:


Finding Diffraction Vectors
===========================

.. GENERATED FROM PYTHON SOURCE LINES 7-9

This example shows how to find the diffraction vectors for a given
signal and then plot them using hyperspy's markers.

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: Python



    import pyxem as pxm
    import hyperspy.api as hs

    s = pxm.data.tilt_boundary_data()







.. GENERATED FROM PYTHON SOURCE LINES 16-19

.. code-block:: Python


    s.find_peaks(interactive=True)  # find the peaks using the interactive peak finder




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/processing/images/sphx_glr_vector_finding_001.png
         :alt: vector finding
         :srcset: /examples/processing/images/sphx_glr_vector_finding_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/processing/images/sphx_glr_vector_finding_002.png
         :alt:  Signal
         :srcset: /examples/processing/images/sphx_glr_vector_finding_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    VBox(children=(Accordion(children=(VBox(children=(HBox(children=(Label(value='x', layout=Layout(width='15%')), IntSlider(value=0, description='index', max=9), BoundedFloatText(value=0.0, continuous_update=True, description='value', max=9.0, step=1.0), Label(value='px', layout=Layout(width='5%')))), HBox(children=(Label(value='y', layout=Layout(width='15%')), IntSlider(value=0, description='index', max=9), BoundedFloatText(value=0.0, continuous_update=True, description='value', max=9.0, step=1.0), Label(value='px', layout=Layout(width='5%')))), Button(description='Set random navigation position.', layout=Layout(width='auto'), style=ButtonStyle(), tooltip='Set random navigation position, useful to check the method parameters.'), Checkbox(value=True, description='Continuous update'))),), titles=('Navigation sliders',)), Accordion(children=(VBox(children=(HBox(children=(Label(value='Method', layout=Layout(width='auto')), Dropdown(options=('Local max', 'Max', 'Minmax', 'Zaefferer', 'Stat', 'Laplacian of Gaussian', 'Difference of Gaussian', 'Template matching'), value='Local max')), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), VBox(children=(HBox(children=(Label(value='Distance', layout=Layout(width='auto')), IntSlider(value=3, max=20, min=1)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Threshold', layout=Layout(width='auto')), FloatSlider(value=10.0, max=20.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between'))), layout=Layout(display='')), VBox(children=(HBox(children=(Label(value='Alpha', layout=Layout(width='auto')), FloatSlider(value=3.0, max=6.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Distance', layout=Layout(width='auto')), IntSlider(value=10, max=20, min=1)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between'))), layout=Layout(display='none')), VBox(children=(HBox(children=(Label(value='Distance', layout=Layout(width='auto')), FloatSlider(value=3.0, max=6.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Threshold', layout=Layout(width='auto')), FloatSlider(value=10.0, max=20.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between'))), layout=Layout(display='none')), VBox(children=(HBox(children=(Label(value='Gradient threshold', layout=Layout(width='auto')), FloatSlider(value=0.1, max=0.2, step=0.020000000000000004)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Window size', layout=Layout(width='auto')), IntSlider(value=40, max=80, min=2)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Distance cutoff', layout=Layout(width='auto')), FloatSlider(value=50.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between'))), layout=Layout(display='none')), VBox(children=(HBox(children=(Label(value='Alpha', layout=Layout(width='auto')), FloatSlider(value=1.0, max=2.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Radius', layout=Layout(width='auto')), IntSlider(value=10, max=20, min=5)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Convergence ratio', layout=Layout(width='auto')), FloatSlider(value=0.05, max=0.1)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between'))), layout=Layout(display='none')), VBox(children=(HBox(children=(Label(value='Min sigma', layout=Layout(width='auto')), FloatSlider(value=1.0, max=2.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Max sigma', layout=Layout(width='auto')), FloatSlider(value=50.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Num sigma', layout=Layout(width='auto')), FloatSlider(value=10.0, max=20.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Threshold', layout=Layout(width='auto')), FloatSlider(value=0.2, max=0.4)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Overlap', layout=Layout(width='auto')), FloatSlider(value=0.5, max=1.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Log scale', layout=Layout(width='auto')), Checkbox(value=False)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between'))), layout=Layout(display='none')), VBox(children=(HBox(children=(Label(value='Min sigma', layout=Layout(width='auto')), FloatSlider(value=1.0, max=2.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Max sigma', layout=Layout(width='auto')), FloatSlider(value=50.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Sigma ratio', layout=Layout(width='auto')), FloatSlider(value=1.6, max=3.2)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Threshold', layout=Layout(width='auto')), FloatSlider(value=0.2, max=0.4)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Overlap', layout=Layout(width='auto')), FloatSlider(value=0.5, max=1.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between'))), layout=Layout(display='none')), VBox(children=(HBox(children=(Label(value='Distance', layout=Layout(width='auto')), FloatSlider(value=5.0, max=10.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between')), HBox(children=(Label(value='Threshold', layout=Layout(width='auto')), FloatSlider(value=0.5, max=2.0)), layout=Layout(display='flex', flex_flow='row', justify_content='space-between'))), layout=Layout(display='none')))),), titles=('Method parameters',)), HBox(children=(Button(description='Compute over navigation axes.', style=ButtonStyle(), tooltip='Find the peaks by iterating over the navigation axes.'), Button(description='Close', style=ButtonStyle(), tooltip='Close widget and close figure.')))))

    <BaseSignal, title: , dimensions: (10, 10|)>



.. GENERATED FROM PYTHON SOURCE LINES 20-45

.. code-block:: Python


    """
    Template Matching
    =================

    The best method for finding peaks is usually through template matching.  In this case a disk with
    some radius is used as the template.  The radius of the disk should be chosen to be the same size
    as the diffraction spots.  The template matching is done using the :meth:`template_match_disk` method.

    This can also be done lazy, including the plotting of the markers!
    """
    s.axes_manager[2].scale = 0.3


    temp_small = s.template_match_disk(disk_r=3, subtract_min=False)  # Too small
    temp = s.template_match_disk(disk_r=5, subtract_min=False)  # Just right
    temp_large = s.template_match_disk(disk_r=7, subtract_min=False)  # Too large
    ind = (5, 5)
    hs.plot.plot_images(
        [temp_small.inav[ind], temp.inav[ind], temp_large.inav[ind]],
        label=["Too Small", "Just Right", "Too Large"],
    )

    vectors = temp.get_diffraction_vectors(threshold_abs=0.4, min_distance=5)




.. image-sg:: /examples/processing/images/sphx_glr_vector_finding_003.png
   :alt: Too Small, Just Right, Too Large
   :srcset: /examples/processing/images/sphx_glr_vector_finding_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/51 [00:00<?, ?it/s]     33%|███▎      | 17/51 [00:00<00:00, 156.60it/s]     76%|███████▋  | 39/51 [00:00<00:00, 187.76it/s]    100%|██████████| 51/51 [00:00<00:00, 196.54it/s]
      0%|          | 0/51 [00:00<?, ?it/s]     33%|███▎      | 17/51 [00:00<00:00, 149.73it/s]     80%|████████  | 41/51 [00:00<00:00, 186.09it/s]    100%|██████████| 51/51 [00:00<00:00, 198.14it/s]
      0%|          | 0/51 [00:00<?, ?it/s]     33%|███▎      | 17/51 [00:00<00:00, 137.72it/s]     80%|████████  | 41/51 [00:00<00:00, 165.95it/s]    100%|██████████| 51/51 [00:00<00:00, 187.69it/s]
      0%|          | 0/51 [00:00<?, ?it/s]     18%|█▊        | 9/51 [00:00<00:00, 76.30it/s]     49%|████▉     | 25/51 [00:00<00:00, 100.60it/s]     76%|███████▋  | 39/51 [00:00<00:00, 112.84it/s]    100%|██████████| 51/51 [00:00<00:00, 118.66it/s]
      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 5395.62it/s]




.. GENERATED FROM PYTHON SOURCE LINES 46-49

Plotting Peaks
==============
We can plot the peaks using hyperSpy's markers and DiffractionVectors.

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: Python


    s.plot()
    s.add_marker(vectors.to_markers(color="red", sizes=10, alpha=0.5))




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/processing/images/sphx_glr_vector_finding_004.png
         :alt: vector finding
         :srcset: /examples/processing/images/sphx_glr_vector_finding_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/processing/images/sphx_glr_vector_finding_005.png
         :alt:  Signal
         :srcset: /examples/processing/images/sphx_glr_vector_finding_005.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 5894.12it/s]




.. GENERATED FROM PYTHON SOURCE LINES 54-63

Subpixel Peak Fitting
=====================

The template matching is done on the pixel grid.  To find the peak position more accurately the correlation
can be up-sampled using the :func:`pyxem.signals.DiffractionVectors.subpixel_refine` method.  This method takes a
`DiffractionSignal2D` object and uses that to refine the peak positions.

This only really works up to up-sampling of 2-4. There is little improvement with increased up-sampling while
it greatly increases the computation time.

.. GENERATED FROM PYTHON SOURCE LINES 63-78

.. code-block:: Python


    refined_peaks_com = vectors.subpixel_refine(s, "center-of-mass", square_size=20)
    refined_peaks_xc = vectors.subpixel_refine(
        s, "cross-correlation", square_size=20, upsample_factor=2, disk_r=5
    )

    markers2 = refined_peaks_com.to_markers(color="blue", sizes=10, alpha=0.25)
    markers3 = refined_peaks_xc.to_markers(color="green", sizes=10, alpha=0.25)


    s.plot()
    s.add_marker(vectors.to_markers(color="red", sizes=10, alpha=0.25))
    s.add_marker(markers2)
    s.add_marker(markers3)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/processing/images/sphx_glr_vector_finding_006.png
         :alt: vector finding
         :srcset: /examples/processing/images/sphx_glr_vector_finding_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/processing/images/sphx_glr_vector_finding_007.png
         :alt:  Signal
         :srcset: /examples/processing/images/sphx_glr_vector_finding_007.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 1752.90it/s]
      0%|          | 0/76 [00:00<?, ?it/s]     18%|█▊        | 14/76 [00:00<00:00, 112.85it/s]     46%|████▌     | 35/76 [00:00<00:00, 157.51it/s]     68%|██████▊   | 52/76 [00:00<00:00, 118.89it/s]     91%|█████████ | 69/76 [00:00<00:00, 129.16it/s]    100%|██████████| 76/76 [00:00<00:00, 127.11it/s]
      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 1866.95it/s]
      0%|          | 0/76 [00:00<?, ?it/s]     12%|█▏        | 9/76 [00:02<00:16,  3.99it/s]     24%|██▎       | 18/76 [00:02<00:06,  8.50it/s]     28%|██▊       | 21/76 [00:04<00:13,  4.07it/s]     36%|███▌      | 27/76 [00:04<00:08,  6.09it/s]     43%|████▎     | 33/76 [00:06<00:09,  4.47it/s]     51%|█████▏    | 39/76 [00:06<00:05,  6.32it/s]     59%|█████▉    | 45/76 [00:08<00:06,  4.65it/s]     67%|██████▋   | 51/76 [00:09<00:03,  6.53it/s]     75%|███████▌  | 57/76 [00:11<00:04,  4.52it/s]     79%|███████▉  | 60/76 [00:11<00:03,  5.31it/s]     87%|████████▋ | 66/76 [00:11<00:01,  7.63it/s]     91%|█████████ | 69/76 [00:13<00:01,  4.34it/s]     95%|█████████▍| 72/76 [00:13<00:00,  5.31it/s]     99%|█████████▊| 75/76 [00:13<00:00,  5.68it/s]    100%|██████████| 76/76 [00:13<00:00,  5.43it/s]
      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 7535.74it/s]
      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 7221.31it/s]
      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 7837.24it/s]




.. GENERATED FROM PYTHON SOURCE LINES 79-81

.. code-block:: Python


    # sphinx_gallery_thumbnail_number = 3








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.101 seconds)


.. _sphx_glr_download_examples_processing_vector_finding.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: vector_finding.ipynb <vector_finding.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: vector_finding.py <vector_finding.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: vector_finding.zip <vector_finding.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
