
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/vectors/masking_vectors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_vectors_masking_vectors.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_vectors_masking_vectors.py:


Diffraction Vectors to Mask
===========================

This example shows how to take a set of vectors and create a mask
from a set of circles around each vector. Multiplying by the original signal
will remove all the signal except for the circles around the vectors.

.. GENERATED FROM PYTHON SOURCE LINES 9-24

.. code-block:: Python


    import pyxem as pxm
    import hyperspy.api as hs

    s = pxm.data.tilt_boundary_data()
    s.calibration.center = None

    s.axes_manager[2].scale = 0.3
    temp = s.template_match_disk(disk_r=5, subtract_min=False)  # Just right
    vectors = temp.get_diffraction_vectors(threshold_abs=0.4, min_distance=5)

    mask = vectors.to_mask(disk_r=7)
    masked_s = s * mask
    masked_s.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/vectors/images/sphx_glr_masking_vectors_001.png
         :alt: masking vectors
         :srcset: /examples/vectors/images/sphx_glr_masking_vectors_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/vectors/images/sphx_glr_masking_vectors_002.png
         :alt:  Signal
         :srcset: /examples/vectors/images/sphx_glr_masking_vectors_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/51 [00:00<?, ?it/s]     33%|███▎      | 17/51 [00:00<00:00, 140.40it/s]     76%|███████▋  | 39/51 [00:00<00:00, 175.21it/s]    100%|██████████| 51/51 [00:00<00:00, 191.59it/s]
      0%|          | 0/51 [00:00<?, ?it/s]     18%|█▊        | 9/51 [00:00<00:00, 61.41it/s]     45%|████▌     | 23/51 [00:00<00:00, 96.87it/s]     67%|██████▋   | 34/51 [00:00<00:00, 96.51it/s]     96%|█████████▌| 49/51 [00:00<00:00, 114.43it/s]    100%|██████████| 51/51 [00:00<00:00, 108.28it/s]
      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 4341.67it/s]
      0%|          | 0/51 [00:00<?, ?it/s]      2%|▏         | 1/51 [00:00<00:09,  5.06it/s]     12%|█▏        | 6/51 [00:00<00:01, 23.37it/s]     18%|█▊        | 9/51 [00:00<00:02, 19.81it/s]     27%|██▋       | 14/51 [00:00<00:01, 27.89it/s]     37%|███▋      | 19/51 [00:00<00:01, 29.74it/s]     45%|████▌     | 23/51 [00:00<00:00, 30.82it/s]     53%|█████▎    | 27/51 [00:00<00:00, 33.20it/s]     61%|██████    | 31/51 [00:01<00:00, 28.63it/s]     73%|███████▎  | 37/51 [00:01<00:00, 29.53it/s]     82%|████████▏ | 42/51 [00:01<00:00, 31.88it/s]    100%|██████████| 51/51 [00:01<00:00, 33.44it/s]




.. GENERATED FROM PYTHON SOURCE LINES 25-28

Selecting One Position
----------------------
We can also just select one position and create a mask from that.

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: Python


    masked_s = s * mask.inav[0, 0]
    masked_s.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/vectors/images/sphx_glr_masking_vectors_003.png
         :alt: masking vectors
         :srcset: /examples/vectors/images/sphx_glr_masking_vectors_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/vectors/images/sphx_glr_masking_vectors_004.png
         :alt:  Signal
         :srcset: /examples/vectors/images/sphx_glr_masking_vectors_004.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 33-37

Removing Vectors
----------------
We can also remove the vectors from the signal by inverting the mask
and multiplying by the original signal.

.. GENERATED FROM PYTHON SOURCE LINES 37-43

.. code-block:: Python


    vectors_filtered = vectors.filter_magnitude(1, 15)
    mask = vectors_filtered.to_mask(disk_r=9)
    masked_s = s * ~mask
    masked_s.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/vectors/images/sphx_glr_masking_vectors_005.png
         :alt: masking vectors
         :srcset: /examples/vectors/images/sphx_glr_masking_vectors_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/vectors/images/sphx_glr_masking_vectors_006.png
         :alt:  Signal
         :srcset: /examples/vectors/images/sphx_glr_masking_vectors_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 3629.46it/s]
      0%|          | 0/51 [00:00<?, ?it/s]     22%|██▏       | 11/51 [00:00<00:00, 100.25it/s]     55%|█████▍    | 28/51 [00:00<00:00, 126.72it/s]     94%|█████████▍| 48/51 [00:00<00:00, 157.18it/s]    100%|██████████| 51/51 [00:00<00:00, 152.61it/s]




.. GENERATED FROM PYTHON SOURCE LINES 44-45

sphinx_gallery_thumbnail_number = 6


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.449 seconds)


.. _sphx_glr_download_examples_vectors_masking_vectors.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: masking_vectors.ipynb <masking_vectors.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: masking_vectors.py <masking_vectors.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: masking_vectors.zip <masking_vectors.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
