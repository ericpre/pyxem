
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plotting/fast_plotting_tricks.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_plotting_fast_plotting_tricks.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plotting_fast_plotting_tricks.py:


Fast Plotting Tricks
====================

Sometimes you want to quickly plot a diffraction pattern but things seem slow,
this mostly happens with "large" data that is loaded Lazily.

There are a couple of different ways that plotting in hyperspy/pyxem can be slow:

1. The data is too large and the navigator is being recalculated every time you plot. (i.e. calling s.plot()
 takes a long time to render)
2. Dragging the navigator is slow and laggy.

.. GENERATED FROM PYTHON SOURCE LINES 15-22

.. code-block:: Python


    from pyxem.data import fe_multi_phase_grains
    import numpy as np
    import hyperspy.api as hs

    s = fe_multi_phase_grains().as_lazy()








.. GENERATED FROM PYTHON SOURCE LINES 23-30

Pre Computing a Navaigator
--------------------------
To solve the first problem, you can:

1. Precompute the navigator using the :meth:`hyperspy.api.signals.plot` method or
the :meth:`hyperspy._signals.LazySignal.compute_navigator` method
which will compute the navigator and store it in the signal. This will make plotting faster.

.. GENERATED FROM PYTHON SOURCE LINES 30-34

.. code-block:: Python


    s.compute_navigator()
    print(s.navigator)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/2 [00:00<?, ?it/s]    100%|██████████| 2/2 [00:00<00:00, 579.20it/s]
    <Diffraction2D, title: , dimensions: (|20, 20)>




.. GENERATED FROM PYTHON SOURCE LINES 35-42

Setting a Navigator
-------------------
2. You can also set the navigator directly using `s.navigator = ...` if you have a navigator
that you want to use. This is useful if a virtual image is created along with the signal when
the data is acquired.  This will also save the navigator in the metadata. This is similar to the
:meth:`hyperspy._signals.LazySignal.compute_navigator`method of the signal and
will be saved when the signal is saved.

.. GENERATED FROM PYTHON SOURCE LINES 42-48

.. code-block:: Python


    dummy_navigator = hs.signals.Signal2D(np.ones((20, 20)))  # just a dummy navigator
    s.navigator = dummy_navigator
    # or
    s.plot(navigator=dummy_navigator)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/plotting/images/sphx_glr_fast_plotting_tricks_001.png
         :alt: fast plotting tricks
         :srcset: /examples/plotting/images/sphx_glr_fast_plotting_tricks_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/plotting/images/sphx_glr_fast_plotting_tricks_002.png
         :alt:  Signal
         :srcset: /examples/plotting/images/sphx_glr_fast_plotting_tricks_002.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 49-53

Using a Slider to Navigate
--------------------------
3. You also don't need to plot the navigator every time you plot the signal. You can set
`navigator = "slider"` to avoid plotting the navigator altogether and just use the sliders.

.. GENERATED FROM PYTHON SOURCE LINES 53-57

.. code-block:: Python


    s.plot(navigator="slider")





.. image-sg:: /examples/plotting/images/sphx_glr_fast_plotting_tricks_003.png
   :alt:  Signal
   :srcset: /examples/plotting/images/sphx_glr_fast_plotting_tricks_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    VBox(children=(HBox(children=(Label(value='x', layout=Layout(width='15%')), IntSlider(value=0, description='index', max=19), BoundedFloatText(value=0.0, continuous_update=True, description='value', max=19.0, step=1.0), Label(value='px', layout=Layout(width='5%')))), HBox(children=(Label(value='y', layout=Layout(width='15%')), IntSlider(value=0, description='index', max=19), BoundedFloatText(value=0.0, continuous_update=True, description='value', max=19.0, step=1.0), Label(value='px', layout=Layout(width='5%')))), Checkbox(value=True, description='Continuous update')))




.. GENERATED FROM PYTHON SOURCE LINES 58-74

Using the QT Backend and Blitting
---------------------------------
To solve the second problem, you can:

1. Use the Qt backend by running `%matplotlib qt` in a Jupyter notebook cell. This will make the
navigator much more responsive using "blitting" which only updates the parts of the plot that
have changed. Note that the QT backend is not available in Google Colab or when running in a
Jupyter notebook on a remote server.

Using Shift + Click to Jump
---------------------------
2. You can use the Shift + Click feature to "Jump" to a specific location in the navigator.
This is useful if you want to quickly move to a specific location in the navigator without
dragging the navigator and loading all the data in between.

3. You can also set the navigator point using the `axes_manager.indices` attribute.

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: Python


    s.axes_manager.indices = (5, 5)  # jump to the center of the navigator
    s.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/plotting/images/sphx_glr_fast_plotting_tricks_004.png
         :alt: fast plotting tricks
         :srcset: /examples/plotting/images/sphx_glr_fast_plotting_tricks_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/plotting/images/sphx_glr_fast_plotting_tricks_005.png
         :alt:  Signal
         :srcset: /examples/plotting/images/sphx_glr_fast_plotting_tricks_005.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 79-83

Saving the Data
---------------
4. Finally, you can always consider saving the data in a more performant format like `.zspy`
This will make loading the data faster which will in turn make plotting faster!

.. GENERATED FROM PYTHON SOURCE LINES 83-87

.. code-block:: Python


    s.save("fast_and_compressed.zspy")

    hs.load("fast_and_compressed.zspy").plot()  # reload the data and plot it



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/plotting/images/sphx_glr_fast_plotting_tricks_006.png
         :alt: fast_and_compressed Navigator
         :srcset: /examples/plotting/images/sphx_glr_fast_plotting_tricks_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/plotting/images/sphx_glr_fast_plotting_tricks_007.png
         :alt: fast_and_compressed Signal
         :srcset: /examples/plotting/images/sphx_glr_fast_plotting_tricks_007.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/rsciio/zspy/_api.py:235: FutureWarning: The NestedDirectoryStore is deprecated and will be removed in a Zarr-Python version 3, see https://github.com/zarr-developers/zarr-python/issues/1274 for more information.
      store = zarr.storage.NestedDirectoryStore(filename)
    [                                        ] | 0% Completed | 155.74 us    [                                        ] | 0% Completed | 100.27 ms    [########################################] | 100% Completed | 200.52 ms





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.607 seconds)


.. _sphx_glr_download_examples_plotting_fast_plotting_tricks.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: fast_plotting_tricks.ipynb <fast_plotting_tricks.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: fast_plotting_tricks.py <fast_plotting_tricks.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: fast_plotting_tricks.zip <fast_plotting_tricks.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
