
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/processing/centering_the_zero_beam.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_processing_centering_the_zero_beam.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_processing_centering_the_zero_beam.py:


Centering the Zero Beam
=======================

.. GENERATED FROM PYTHON SOURCE LINES 7-8

Making a Dummy Dataset with a Zero Beam that systematically deviates from the center

.. GENERATED FROM PYTHON SOURCE LINES 8-13

.. code-block:: Python

    import hyperspy.api as hs
    import pyxem as pxm

    s = pxm.data.tilt_boundary_data(correct_pivot_point=False)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/76 [00:00<?, ?it/s]    100%|██████████| 76/76 [00:00<00:00, 794.88it/s]




.. GENERATED FROM PYTHON SOURCE LINES 14-17

Getting the Position of the Zero beam
-------------------------------------
The zero beam position can be obtained using the :meth:`get_direct_beam_position` method.

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: Python


    s_shifts = s.get_direct_beam_position(method="blur", sigma=5, half_square_width=20)
    s_shifts.plot()





.. image-sg:: /examples/processing/images/sphx_glr_centering_the_zero_beam_001.png
   :alt: x-shift, y-shift
   :srcset: /examples/processing/images/sphx_glr_centering_the_zero_beam_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 552.18it/s]

    [<Axes: title={'center': 'x-shift'}, xlabel='x axis (px)', ylabel='y axis (px)'>, <Axes: title={'center': 'y-shift'}, xlabel='x axis (px)', ylabel='y axis (px)'>]



.. GENERATED FROM PYTHON SOURCE LINES 23-26

Visualize the Zero Beam Position
--------------------------------
To visualize the zero beam position, we can plot the beam position on the original signal.

.. GENERATED FROM PYTHON SOURCE LINES 26-29

.. code-block:: Python

    s.plot(axes_ticks=True)
    s_shifts.plot_on_signal(s)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/processing/images/sphx_glr_centering_the_zero_beam_002.png
         :alt: centering the zero beam
         :srcset: /examples/processing/images/sphx_glr_centering_the_zero_beam_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/processing/images/sphx_glr_centering_the_zero_beam_003.png
         :alt:  Signal
         :srcset: /examples/processing/images/sphx_glr_centering_the_zero_beam_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 6145.94it/s]




.. GENERATED FROM PYTHON SOURCE LINES 30-35

Getting a Linear Plane
---------------------
In many instances the zero beam position will vary systematically with the scan position.
This can be corrected by fitting a linear plane to the zero beam position using the
:meth:`get_linear_plane` method.

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: Python

    s_linear_plane = s_shifts.get_linear_plane()
    s_linear_plane.plot()




.. image-sg:: /examples/processing/images/sphx_glr_centering_the_zero_beam_004.png
   :alt: x-shift, y-shift
   :srcset: /examples/processing/images/sphx_glr_centering_the_zero_beam_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<Axes: title={'center': 'x-shift'}, xlabel='x axis (px)', ylabel='y axis (px)'>, <Axes: title={'center': 'y-shift'}, xlabel='x axis (px)', ylabel='y axis (px)'>]



.. GENERATED FROM PYTHON SOURCE LINES 39-44

Centering the Zero Beam
-----------------------
The zero beam can be centered using the :meth:`center_direct_beam` method.
Then we sum all the diffraction patterns for the both the centered beam,
and the non-centered one, to compare them.

.. GENERATED FROM PYTHON SOURCE LINES 44-51

.. code-block:: Python


    s_centered = s.center_direct_beam(shifts=s_linear_plane, inplace=False)
    s_pacbed_centered = s_centered.sum()
    s_pacbed = s.sum()

    hs.plot.plot_images([s_pacbed, s_pacbed_centered], label=["Original", "Centered"])




.. image-sg:: /examples/processing/images/sphx_glr_centering_the_zero_beam_005.png
   :alt: Original, Centered
   :srcset: /examples/processing/images/sphx_glr_centering_the_zero_beam_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/76 [00:00<?, ?it/s]    100%|██████████| 76/76 [00:00<00:00, 755.58it/s]    100%|██████████| 76/76 [00:00<00:00, 754.26it/s]

    [<Axes: title={'center': 'Original'}, xlabel='kx axis (px)', ylabel='ky axis (px)'>, <Axes: title={'center': 'Centered'}, xlabel='kx axis (px)', ylabel='ky axis (px)'>]



.. GENERATED FROM PYTHON SOURCE LINES 52-64

Centering the Zero Beam with constant deflection magnitude
----------------------------------------------------------
In the presence of electromagnetic fields in the entire sample area,
the plane fitting can fail. In this case, two separate effects can be observed:

1. The zero beam position varies systematically with the scan position due to the effects of descan
2. The zero beam will be deflected from electromagnetic fields in the sample

Assuming that the effects of 1 are systematic and that the electromagnetic fields have
constant strengths, we can try to fit a plane to correct for effects of 1 by minimizing the
magnitude variance. You may need use a mask and/or have several electromagnetic
domains for good performance.

.. GENERATED FROM PYTHON SOURCE LINES 64-69

.. code-block:: Python


    s_probes = pxm.data.simulated_constant_shift_magnitude()

    s_shifts = s_probes.get_direct_beam_position(method="center_of_mass")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/76 [00:00<?, ?it/s]     96%|█████████▌| 73/76 [00:00<00:00, 727.70it/s]    100%|██████████| 76/76 [00:00<00:00, 748.78it/s]




.. GENERATED FROM PYTHON SOURCE LINES 70-74

Getting the Linear Plane
------------------------
We call `get_linear_plane` with `constrain_magnitude_variance=True`. Then
we can center the direct beam as normal.

.. GENERATED FROM PYTHON SOURCE LINES 74-80

.. code-block:: Python

    s_shifts.plot(suptitle="Before Constrained Linear Plane Fit")
    s_linear_plane = s_shifts.get_linear_plane(constrain_magnitude_variance=True)
    s_linear_plane.plot(suptitle="After Constrained Linear Plane Fit")

    s_probes.center_direct_beam(shifts=s_linear_plane)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/processing/images/sphx_glr_centering_the_zero_beam_006.png
         :alt: Before Constrained Linear Plane Fit,  (0,),  (1,)
         :srcset: /examples/processing/images/sphx_glr_centering_the_zero_beam_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/processing/images/sphx_glr_centering_the_zero_beam_007.png
         :alt: After Constrained Linear Plane Fit,  (0,),  (1,)
         :srcset: /examples/processing/images/sphx_glr_centering_the_zero_beam_007.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/76 [00:00<?, ?it/s]     99%|█████████▊| 75/76 [00:00<00:00, 707.21it/s]    100%|██████████| 76/76 [00:00<00:00, 711.60it/s]




.. GENERATED FROM PYTHON SOURCE LINES 81-86

Getting the Electromagnetic Domains
-----------------------------------
The found electromagnetic domains can be visualized by subtracting the linear plane from the original shifts.
This is done by subtracting the linear plane determined from the constrained magnitude variance
from the original shifts.

.. GENERATED FROM PYTHON SOURCE LINES 86-94

.. code-block:: Python

    s_shifts -= s_linear_plane
    s_shifts.get_magnitude_phase_signal().plot()

    # For more realistic data, the linear plane optimization algorithm can give poor results. In this case,
    # you can change the initial values for the optimization algorithm by using the `initial_values` parameter
    # in `get_linear_plane`. See the docstring for more information. Try varying this and see if the plane
    # changes significantly.




.. image-sg:: /examples/processing/images/sphx_glr_centering_the_zero_beam_008.png
   :alt:  Signal
   :srcset: /examples/processing/images/sphx_glr_centering_the_zero_beam_008.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.071 seconds)


.. _sphx_glr_download_examples_processing_centering_the_zero_beam.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: centering_the_zero_beam.ipynb <centering_the_zero_beam.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: centering_the_zero_beam.py <centering_the_zero_beam.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: centering_the_zero_beam.zip <centering_the_zero_beam.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
