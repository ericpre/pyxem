
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/processing/circular_hough_transform.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_processing_circular_hough_transform.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_processing_circular_hough_transform.py:


Circular Hough Transform Peak Finding
=====================================

The Circular Hough Transform is a method to detect circular features in an image. It can be
used to detect rings (or disks) in the diffraction pattern.  For strain mapping there is
some evidence that the Circular Hough transform is more accurate than typical template matching
and can provide subpixel accuracy.

That being said, the Windowed Template Matching that pyxem uses is quite robust, (both to noise
and in homogeniety in the diffraction disks) although a complete comparison hasn't been fully
studied.

.. GENERATED FROM PYTHON SOURCE LINES 16-17

Making a Dummy Dataset

.. GENERATED FROM PYTHON SOURCE LINES 17-26

.. code-block:: Python

    import hyperspy.api as hs
    import pyxem as pxm
    from skimage.transform import hough_circle
    from skimage.feature import canny
    import numpy as np

    s = pxm.data.tilt_boundary_data(correct_pivot_point=True)









.. GENERATED FROM PYTHON SOURCE LINES 27-31

Canny Filter
---------------------
First we have to apply a Canny filter to the dataset to get a binary image of the
outlines of the disks.  This is basically a 1st diriviative in reciporical space

.. GENERATED FROM PYTHON SOURCE LINES 31-43

.. code-block:: Python


    # Filter the image with a Canny filter.
    canny_img = s.map(
        canny,
        sigma=2,
        low_threshold=0.6,
        high_threshold=0.8,
        inplace=False,
        use_quantiles=True,
    )

    canny_img.plot()  # Plotting canny filtered image with outlines



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/processing/images/sphx_glr_circular_hough_transform_001.png
         :alt: circular hough transform
         :srcset: /examples/processing/images/sphx_glr_circular_hough_transform_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/processing/images/sphx_glr_circular_hough_transform_002.png
         :alt:  Signal
         :srcset: /examples/processing/images/sphx_glr_circular_hough_transform_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/51 [00:00<?, ?it/s]     29%|██▉       | 15/51 [00:00<00:00, 146.58it/s]     61%|██████    | 31/51 [00:00<00:00, 153.86it/s]     96%|█████████▌| 49/51 [00:00<00:00, 162.37it/s]    100%|██████████| 51/51 [00:00<00:00, 164.47it/s]




.. GENERATED FROM PYTHON SOURCE LINES 44-48

Computing the Hough Transform
-----------------------------
We can then compute the hough Transform using the radius of the disk. It is possible to
have multiple radii but that will return multiple signals for each radii

.. GENERATED FROM PYTHON SOURCE LINES 48-59

.. code-block:: Python



    def hough_circle_single_rad(img, radius, **kwargs):
        return hough_circle(img, radius, **kwargs)[
            0
        ]  # Otherwise multiple radii are returned


    circular_hough = canny_img.map(hough_circle_single_rad, radius=6, inplace=False)
    circular_hough.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/processing/images/sphx_glr_circular_hough_transform_003.png
         :alt: circular hough transform
         :srcset: /examples/processing/images/sphx_glr_circular_hough_transform_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/processing/images/sphx_glr_circular_hough_transform_004.png
         :alt:  Signal
         :srcset: /examples/processing/images/sphx_glr_circular_hough_transform_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 843.63it/s]




.. GENERATED FROM PYTHON SOURCE LINES 60-63

Finding Peaks
-------------
Finding peaks is fairly easy from this point and uses the ``get_diffraction_vectors`` function.

.. GENERATED FROM PYTHON SOURCE LINES 63-70

.. code-block:: Python


    dv = circular_hough.get_diffraction_vectors(threshold_abs=0.4, min_distance=4)

    m = dv.to_markers(facecolor="none", edgecolor="w")
    circular_hough.plot()
    circular_hough.add_marker(m)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/processing/images/sphx_glr_circular_hough_transform_005.png
         :alt: circular hough transform
         :srcset: /examples/processing/images/sphx_glr_circular_hough_transform_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/processing/images/sphx_glr_circular_hough_transform_006.png
         :alt:  Signal
         :srcset: /examples/processing/images/sphx_glr_circular_hough_transform_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/51 [00:00<?, ?it/s]     18%|█▊        | 9/51 [00:00<00:00, 77.29it/s]     49%|████▉     | 25/51 [00:00<00:00, 106.86it/s]     80%|████████  | 41/51 [00:00<00:00, 118.10it/s]    100%|██████████| 51/51 [00:00<00:00, 129.82it/s]
      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 6936.56it/s]
      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 5858.29it/s]




.. GENERATED FROM PYTHON SOURCE LINES 71-72

sphinx_gallery_thumbnail_number = 6


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.250 seconds)


.. _sphx_glr_download_examples_processing_circular_hough_transform.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: circular_hough_transform.ipynb <circular_hough_transform.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: circular_hough_transform.py <circular_hough_transform.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: circular_hough_transform.zip <circular_hough_transform.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
