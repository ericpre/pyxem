
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/amorphous_characterization/FEM.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_amorphous_characterization_FEM.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_amorphous_characterization_FEM.py:


Fluctuation Electron Microscopy
===============================
This example shows you how to perform a fluctuation electron microscopy (FEM) analysis.

In this example we will focus on calculating :math:`V_\Omega (k)` which is defined as,

Equation 1:

.. math::

    V_\Omega (k) = \frac{\langle I{^2}(k) \rangle{_r} - \langle I(k)\rangle_r^2}{\langle I(k)\rangle_r^2 } - \frac{G}{\langle I(k)\rangle_r}

where :math:`I(k)` is the diffracted electron intensity averaged over the polar angle at constant scattering
vector magnitude k, :math:`<>_r` indicates averaging over probe positions, and G is the gain of the electron camera
in counts per electron for counted or data from hybrid pixel detectors this value is 1 otherwise it will be some
mean value. The first term is the definition of the variance, and the second term is a correction to
the variance for Poisson noise in the data.

(There are several different possible variance signals. Here, we use the notation from
Daulton, et al. Ultramicroscopy 110, 1279–1289 (2010), DOI: 10.1016/j.ultramic.2010.05.010.)

.. GENERATED FROM PYTHON SOURCE LINES 23-33

.. code-block:: Python


    import pyxem as pxm
    from pyxem.utils import determine_ellipse
    import numpy as np
    import hyperspy.api as hs
    from pyxem.utils._pixelated_stem_tools import _copy_axes_object_metadata

    s = pxm.data.zrcual_1(allow_download=True, signal_type="electron_diffraction")
    s.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/amorphous_characterization/images/sphx_glr_FEM_001.png
         :alt: pos1-1 Navigator
         :srcset: /examples/amorphous_characterization/images/sphx_glr_FEM_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/amorphous_characterization/images/sphx_glr_FEM_002.png
         :alt: pos1-1 Signal
         :srcset: /examples/amorphous_characterization/images/sphx_glr_FEM_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading file 'pos1-1.zspy' from 'https://zenodo.org/records/15490547/files/pos1-1.zspy' to '/home/runner/.cache/pyxem/0.21.0'.
      0%|                                              | 0.00/18.3M [00:00<?, ?B/s]      0%|                                     | 5.12k/18.3M [00:00<08:09, 37.3kB/s]      0%|                                      | 39.9k/18.3M [00:00<01:57, 155kB/s]      1%|▏                                     | 93.2k/18.3M [00:00<01:13, 246kB/s]      1%|▍                                      | 209k/18.3M [00:00<00:39, 453kB/s]      2%|▊                                      | 406k/18.3M [00:00<00:23, 759kB/s]      5%|█▋                                    | 830k/18.3M [00:00<00:11, 1.46MB/s]      9%|███▎                                 | 1.61M/18.3M [00:01<00:06, 2.67MB/s]     18%|██████▌                              | 3.23M/18.3M [00:01<00:02, 5.22MB/s]     35%|█████████████                        | 6.42M/18.3M [00:01<00:01, 10.2MB/s]     49%|██████████████████▏                  | 8.97M/18.3M [00:01<00:00, 12.1MB/s]     65%|████████████████████████             | 11.9M/18.3M [00:01<00:00, 14.2MB/s]     83%|██████████████████████████████▋      | 15.1M/18.3M [00:01<00:00, 16.4MB/s]     99%|████████████████████████████████████▋| 18.1M/18.3M [00:01<00:00, 17.3MB/s]      0%|                                              | 0.00/18.3M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 18.3M/18.3M [00:00<00:00, 147GB/s]




.. GENERATED FROM PYTHON SOURCE LINES 34-38

Using Manual Ellipse Determination
----------------------------------
Sometimes it is useful to force the ellipse to fit certain points.  For example, here we
can force the ellipse to fit the first ring by masking the zero beam.

.. GENERATED FROM PYTHON SOURCE LINES 38-59

.. code-block:: Python


    summed = s.sum()

    center, affine, params, pos = pxm.utils.ransac_ellipse_tools.determine_ellipse(
        summed,
        return_params=True,
        num_points=500,
        use_ransac=False,
    )
    el, in_points = pxm.utils.ransac_ellipse_tools.ellipse_to_markers(
        ellipse_array=params,
        points=pos,
    )

    # we don't account for scales/offsets yet
    summed.axes_manager.signal_axes[0].scale = 1
    summed.axes_manager.signal_axes[1].scale = 1
    summed.axes_manager.signal_axes[1].offset = 0
    summed.axes_manager.signal_axes[0].offset = 0









.. GENERATED FROM PYTHON SOURCE LINES 60-65

Checking
--------
Let's check to make sure that things are behaving.  We can first plot the ellipse over
the data and then take the azimuthal integral/sum.
That should end up a nice straight line

.. GENERATED FROM PYTHON SOURCE LINES 65-77

.. code-block:: Python


    summed.plot()
    summed.add_marker(in_points, plot_marker=True)
    summed.add_marker(el, plot_marker=True)


    s.calibration.center = center[::-1]  # reverse the center.
    s.calibration.affine = affine
    az = s.get_azimuthal_integral2d(npt=100).sum().isig[:, 2.0:8.0]

    az.sum().plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/amorphous_characterization/images/sphx_glr_FEM_003.png
         :alt:  Signal
         :srcset: /examples/amorphous_characterization/images/sphx_glr_FEM_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/amorphous_characterization/images/sphx_glr_FEM_004.png
         :alt:  Signal
         :srcset: /examples/amorphous_characterization/images/sphx_glr_FEM_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/26 [00:00<?, ?it/s]      4%|▍         | 1/26 [00:02<01:13,  2.94s/it]     65%|██████▌   | 17/26 [00:03<00:01,  7.72it/s]    100%|██████████| 26/26 [00:03<00:00,  8.42it/s]




.. GENERATED FROM PYTHON SOURCE LINES 78-86

Getting the Variance
--------------------
The :meth:`~.signals.diffraction2d.get_variance` function will calculate the variance using the affine correction
and the center as described above. Restricting the radial range is also nice to remove
the effects of the high intensity at the top end. Adding a mask can also be helpful for
reducing the effects of a beam stop. The ``gain`` parameter is number of detector units for 1 electron.
It's used for the Poisson noise correction. If the data are already calibrated in units of electron counts,
use a gain of 1.

.. GENERATED FROM PYTHON SOURCE LINES 86-93

.. code-block:: Python


    mask = summed < 10000
    mask.plot()
    variance = s.get_variance(npt=50, gain=4.2, radial_range=(3.0, 5.75), mask=mask)
    variance.axes_manager[0].units = "$nm^{-1}$"
    variance.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/amorphous_characterization/images/sphx_glr_FEM_005.png
         :alt:  Signal
         :srcset: /examples/amorphous_characterization/images/sphx_glr_FEM_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/amorphous_characterization/images/sphx_glr_FEM_006.png
         :alt:  Signal
         :srcset: /examples/amorphous_characterization/images/sphx_glr_FEM_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/51 [00:00<?, ?it/s]      2%|▏         | 1/51 [00:00<00:42,  1.17it/s]     96%|█████████▌| 49/51 [00:00<00:00, 69.64it/s]    100%|██████████| 51/51 [00:00<00:00, 53.35it/s]
      0%|          | 0/51 [00:00<?, ?it/s]      2%|▏         | 1/51 [00:00<00:33,  1.48it/s]    100%|██████████| 51/51 [00:00<00:00, 69.03it/s]




.. GENERATED FROM PYTHON SOURCE LINES 94-104

Getting a (Good) Variance
-------------------------
If the TEM sample varies in thickness by more than a few nm over the entire dataset,
thickness-related differences in the diffracted intensity  will dominate structure-related
differences and therefore dominate. This effect can be avoided by using the HAADF signal or
the high-angle scattering within the diffraction pattern to determine the local sample thickness,
grouping the diffraction patterns into bins of nearly constant thickness, and only computing :math:`V_\\Omega (k)`
for data inside a single bin. The :math:`V_\\Omega (k)` from different thickness bins then can be averaged
together. See Hwang and Voyles Microscopy and Microanalysis 17, 67–74 (2011), DOI: 10.1017/S1431927610094109
and Li et al. Microscopy and Microanalysis 20, 1605–1618 (2014). DOI: 10.1017/s1431927614012756 for more details.

.. GENERATED FROM PYTHON SOURCE LINES 104-108

.. code-block:: Python


    # We have already saved the simultaneously-acquired HAADF image along side the dataset. We can see this here...
    haadf = s.metadata.HAADF.intensity








.. GENERATED FROM PYTHON SOURCE LINES 109-121

The HAADF signal for an amorphous material is linear in the thickness for typical TEM sample thicknesses.
To convert the HAADF digital counts to thickness (in e.g. nm), the slope and intercept of the linear
relationship must be known. The intercept is the black level of the HAADF detector in digital counts,
which in this case is 26,265. The slope must be calibrated for each experiment from a measurement of
the HAADF intensity at a position of known sample thickness. In this case, the slope is 440.46 digital
counts / nm of sample thickness.

TEM sample thickness for amorphous materials can be measured independently either using electron energy
loss spectroscopy (EELS), in which the inelastic mean free path of the material must be known, or using total
elastic scattering, in which case the elastic mean free path of the material must be known. A reasonable model
for the elastic mean free path for many inorganic materials may be found
in Zhang et al. Ultramicroscopy 171, 89–95 (2016), DOI: 10.1016/j.ultramic.2016.09.005.

.. GENERATED FROM PYTHON SOURCE LINES 121-156

.. code-block:: Python


    thickness = (haadf - 26265) / 440.46


    def thickness_filter(signal, thickness, bins):
        masks = [
            np.logical_and(bins[i] < thickness, bins[i + 1] > thickness)
            for i in range(len(bins) - 1)
        ]
        filtered = [hs.signals.Signal2D(signal.data[m.data, :, :]) for m in masks]
        for f in filtered:
            f.set_signal_type("electron_diffraction")
            _copy_axes_object_metadata(
                signal.axes_manager.signal_axes[0], f.axes_manager.signal_axes[0]
            )
            _copy_axes_object_metadata(
                signal.axes_manager.signal_axes[1], f.axes_manager.signal_axes[1]
            )
            f.metadata.add_dictionary(signal.metadata.as_dictionary())
        return filtered, thickness


    bins = np.linspace(
        np.min(thickness, axis=(0, 1)), np.max(thickness, axis=(0, 1)), num=2 + 1
    )
    filtered, thickness = thickness_filter(s, thickness, bins)
    var = [
        f.get_variance(npt=50, gain=4.2, radial_range=(3.0, 5.7), mask=mask)
        for f in filtered
    ]

    # Note that the y-axis is the variance here. Hyperspy just always labels this as "Intensity"
    for v in var:
        v.axes_manager[0].units = "$nm^{-1}$"
    hs.plot.plot_spectra(var, legend=["thickness<17.5nm", "thickness<18.5nm"])



.. image-sg:: /examples/amorphous_characterization/images/sphx_glr_FEM_007.png
   :alt: FEM
   :srcset: /examples/amorphous_characterization/images/sphx_glr_FEM_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/49 [00:00<?, ?it/s]    100%|██████████| 49/49 [00:00<00:00, 844.87it/s]
      0%|          | 0/49 [00:00<?, ?it/s]    100%|██████████| 49/49 [00:00<00:00, 1399.31it/s]
      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 826.41it/s]
      0%|          | 0/51 [00:00<?, ?it/s]    100%|██████████| 51/51 [00:00<00:00, 1393.86it/s]

    <Axes: xlabel='Radius ($nm^{-1}$)', ylabel='Intensity'>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 42.257 seconds)


.. _sphx_glr_download_examples_amorphous_characterization_FEM.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: FEM.ipynb <FEM.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: FEM.py <FEM.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: FEM.zip <FEM.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
